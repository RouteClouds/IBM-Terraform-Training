# Git Collaboration Diagrams - Python Dependencies
# Professional diagram generation for Topic 5.3: Version Control and Collaboration with Git

# Core plotting and visualization
matplotlib>=3.7.0
numpy>=1.24.0
seaborn>=0.12.0

# Enhanced plotting capabilities
plotly>=5.15.0
bokeh>=3.2.0

# Image processing and manipulation
Pillow>=10.0.0
imageio>=2.31.0

# Data manipulation and analysis
pandas>=2.0.0
scipy>=1.11.0

# Color palette and styling
colorcet>=3.0.0
palettable>=3.3.0

# Professional typography and fonts
fonttools>=4.40.0

# Diagram layout and positioning
networkx>=3.1.0

# Export and file format support
svglib>=1.5.0
reportlab>=4.0.0

# Development and testing
pytest>=7.4.0
black>=23.7.0
flake8>=6.0.0

# Documentation generation
sphinx>=7.1.0
sphinx-rtd-theme>=1.3.0

# Version information
# matplotlib: Professional plotting library for high-quality diagrams
# numpy: Numerical computing for diagram calculations and positioning
# seaborn: Statistical visualization and enhanced styling
# plotly: Interactive diagrams and advanced visualizations
# bokeh: Web-based interactive visualizations
# Pillow: Image processing for diagram enhancement
# pandas: Data manipulation for metrics and analysis
# scipy: Scientific computing for advanced diagram layouts
# colorcet: Professional color palettes for enterprise diagrams
# networkx: Graph layouts for workflow and dependency diagrams
# fonttools: Professional typography for enterprise documentation
# svglib: Vector graphics support for scalable diagrams
# reportlab: PDF generation for documentation integration

# Installation instructions:
# pip install -r requirements.txt
#
# For development environment:
# pip install -r requirements.txt
# pip install -e .
#
# For production deployment:
# pip install --no-dev -r requirements.txt

# Compatibility notes:
# - Python 3.8+ required for all dependencies
# - matplotlib 3.7+ required for enhanced styling features
# - numpy 1.24+ required for improved performance
# - All packages tested on Ubuntu 20.04+ and macOS 12+
# - Windows compatibility verified with Python 3.9+

# Performance optimization:
# - Use conda for faster dependency resolution: conda install --file requirements.txt
# - Consider using mamba for even faster installation: mamba install --file requirements.txt
# - For CI/CD environments, use pip-tools for dependency locking

# Security considerations:
# - All packages from trusted PyPI sources
# - Regular security updates recommended
# - Use virtual environments for isolation
# - Consider using pip-audit for vulnerability scanning
