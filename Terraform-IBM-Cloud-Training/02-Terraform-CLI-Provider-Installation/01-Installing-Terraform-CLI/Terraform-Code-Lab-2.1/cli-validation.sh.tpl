#!/bin/bash
# Terraform CLI Validation Script
# Generated by Terraform Lab 2.1 - CLI Installation Verification
# This script performs comprehensive validation of Terraform CLI installation and configuration

set -e

# Configuration from Terraform variables
TERRAFORM_VERSION_CONSTRAINT="${terraform_version_constraint}"
EXPECTED_PROVIDERS=(${expected_providers})
TEST_TIMEOUT=${test_timeout}
LOG_LEVEL="${log_level}"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
VALIDATION_REPORT="cli_validation_report_$TIMESTAMP.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Validation results tracking
VALIDATION_RESULTS=()
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

echo -e "${BLUE}🔍 Starting Terraform CLI Validation${NC}"
echo "====================================="
echo "Validation Configuration:"
echo "  - Version Constraint: $TERRAFORM_VERSION_CONSTRAINT"
echo "  - Expected Providers: ${EXPECTED_PROVIDERS[*]}"
echo "  - Test Timeout: $TEST_TIMEOUT seconds"
echo "  - Log Level: $LOG_LEVEL"
echo "  - Report File: $VALIDATION_REPORT"
echo ""

# Function to log validation results
log_validation() {
    local test_name="$1"
    local status="$2"
    local message="$3"
    local details="$4"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    if [ "$status" = "PASS" ]; then
        PASSED_TESTS=$((PASSED_TESTS + 1))
        echo -e "  ${GREEN}✓ PASS${NC} $test_name: $message"
    else
        FAILED_TESTS=$((FAILED_TESTS + 1))
        echo -e "  ${RED}✗ FAIL${NC} $test_name: $message"
        if [ -n "$details" ]; then
            echo -e "    ${YELLOW}Details:${NC} $details"
        fi
    fi
    
    # Store result for JSON report
    VALIDATION_RESULTS+=("{\"test\":\"$test_name\",\"status\":\"$status\",\"message\":\"$message\",\"details\":\"$details\"}")
}

# Function to check command availability
check_command() {
    local cmd="$1"
    local test_name="$2"
    
    if command -v "$cmd" >/dev/null 2>&1; then
        local version=$(eval "$cmd --version 2>/dev/null | head -n1" || echo "unknown")
        log_validation "$test_name" "PASS" "Command available" "$version"
        return 0
    else
        log_validation "$test_name" "FAIL" "Command not found" "Install $cmd and ensure it's in PATH"
        return 1
    fi
}

# Function to validate version constraint
validate_version_constraint() {
    local version="$1"
    local constraint="$2"
    
    # Simple version comparison (supports >= constraints)
    if [[ "$constraint" =~ ^\>=\ (.+)$ ]]; then
        local required_version="${BASH_REMATCH[1]}"
        
        # Convert versions to comparable format (assuming semantic versioning)
        local version_num=$(echo "$version" | sed 's/[^0-9.]//g')
        local required_num=$(echo "$required_version" | sed 's/[^0-9.]//g')
        
        if [ "$(printf '%s\n' "$required_num" "$version_num" | sort -V | head -n1)" = "$required_num" ]; then
            return 0
        else
            return 1
        fi
    fi
    
    # Default to pass if constraint format not recognized
    return 0
}

echo -e "${YELLOW}🧪 Running CLI Validation Tests${NC}"
echo "==============================="

# Test 1: Terraform CLI availability
echo -e "\n${PURPLE}Test Group: CLI Installation${NC}"
check_command "terraform" "terraform_cli_available"

# Test 2: Terraform version validation
if command -v terraform >/dev/null 2>&1; then
    terraform_version=$(terraform version -json 2>/dev/null | jq -r '.terraform_version' 2>/dev/null || terraform version | head -n1 | cut -d' ' -f2 | sed 's/v//')
    
    if [ -n "$terraform_version" ] && [ "$terraform_version" != "null" ]; then
        if validate_version_constraint "$terraform_version" "$TERRAFORM_VERSION_CONSTRAINT"; then
            log_validation "terraform_version_constraint" "PASS" "Version meets constraint" "Found: $terraform_version, Required: $TERRAFORM_VERSION_CONSTRAINT"
        else
            log_validation "terraform_version_constraint" "FAIL" "Version does not meet constraint" "Found: $terraform_version, Required: $TERRAFORM_VERSION_CONSTRAINT"
        fi
    else
        log_validation "terraform_version_detection" "FAIL" "Could not detect Terraform version" "Check Terraform installation"
    fi
fi

# Test 3: Terraform configuration validation
echo -e "\n${PURPLE}Test Group: Configuration Validation${NC}"

# Create test configuration
cat > test_validation.tf << 'EOF'
terraform {
  required_version = ">= 1.5.0"
  required_providers {
    ibm = {
      source  = "IBM-Cloud/ibm"
      version = "~> 1.60.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.5.0"
    }
  }
}

provider "ibm" {
  region = "us-south"
}

resource "random_string" "validation_test" {
  length = 8
}
EOF

# Test terraform validate
if timeout $TEST_TIMEOUT terraform validate >/dev/null 2>&1; then
    log_validation "terraform_validate" "PASS" "Configuration validation successful" "test_validation.tf is valid"
else
    log_validation "terraform_validate" "FAIL" "Configuration validation failed" "Check Terraform syntax and provider availability"
fi

# Test 4: Provider initialization
echo -e "\n${PURPLE}Test Group: Provider Validation${NC}"

# Test terraform init
if timeout $TEST_TIMEOUT terraform init >/dev/null 2>&1; then
    log_validation "terraform_init" "PASS" "Provider initialization successful" "All required providers downloaded"
    
    # Test provider availability
    for provider in "${EXPECTED_PROVIDERS[@]}"; do
        if terraform providers | grep -q "$provider"; then
            log_validation "provider_${provider}_available" "PASS" "Provider $provider is available" "Found in provider list"
        else
            log_validation "provider_${provider}_available" "FAIL" "Provider $provider not found" "Check provider configuration"
        fi
    done
else
    log_validation "terraform_init" "FAIL" "Provider initialization failed" "Check network connectivity and provider configuration"
fi

# Test 5: CLI Configuration
echo -e "\n${PURPLE}Test Group: CLI Configuration${NC}"

# Check for CLI configuration file
config_files=("$HOME/.terraformrc" "$HOME/.terraform.rc" "$APPDATA/terraform.rc")
config_found=false

for config_file in "${config_files[@]}"; do
    if [ -f "$config_file" ]; then
        log_validation "cli_config_file" "PASS" "CLI configuration file found" "$config_file"
        config_found=true
        break
    fi
done

if [ "$config_found" = false ]; then
    log_validation "cli_config_file" "FAIL" "No CLI configuration file found" "Consider creating ~/.terraformrc for optimization"
fi

# Check plugin cache directory
plugin_cache_dirs=("$HOME/.terraform.d/plugin-cache" "$APPDATA/.terraform.d/plugin-cache")
cache_found=false

for cache_dir in "${plugin_cache_dirs[@]}"; do
    if [ -d "$cache_dir" ]; then
        cache_size=$(du -sh "$cache_dir" 2>/dev/null | cut -f1 || echo "unknown")
        log_validation "plugin_cache_configured" "PASS" "Plugin cache directory found" "$cache_dir ($cache_size)"
        cache_found=true
        break
    fi
done

if [ "$cache_found" = false ]; then
    log_validation "plugin_cache_configured" "FAIL" "Plugin cache not configured" "Enable plugin caching for better performance"
fi

# Test 6: Network connectivity
echo -e "\n${PURPLE}Test Group: Network Connectivity${NC}"

# Test Terraform registry connectivity
if curl -s --connect-timeout 10 https://registry.terraform.io/v1/providers/IBM-Cloud/ibm >/dev/null 2>&1; then
    log_validation "terraform_registry_connectivity" "PASS" "Terraform registry accessible" "https://registry.terraform.io"
else
    log_validation "terraform_registry_connectivity" "FAIL" "Terraform registry not accessible" "Check network connectivity and proxy settings"
fi

# Test IBM Cloud API connectivity
if curl -s --connect-timeout 10 https://iam.cloud.ibm.com/identity/token >/dev/null 2>&1; then
    log_validation "ibm_cloud_api_connectivity" "PASS" "IBM Cloud API accessible" "https://iam.cloud.ibm.com"
else
    log_validation "ibm_cloud_api_connectivity" "FAIL" "IBM Cloud API not accessible" "Check network connectivity and firewall settings"
fi

# Test 7: Security and compliance
echo -e "\n${PURPLE}Test Group: Security Validation${NC}"

# Check for checkpoint disable (enterprise best practice)
if grep -q "disable_checkpoint.*true" "$HOME/.terraformrc" 2>/dev/null || [ "$TF_DISABLE_CHECKPOINT" = "1" ]; then
    log_validation "checkpoint_disabled" "PASS" "Checkpoint disabled for security" "Enterprise security compliance"
else
    log_validation "checkpoint_disabled" "FAIL" "Checkpoint not disabled" "Consider disabling for enterprise environments"
fi

# Generate validation report
echo -e "\n${YELLOW}📊 Generating Validation Report${NC}"
echo "================================"

# Calculate success rate
success_rate=$(echo "scale=1; $PASSED_TESTS * 100 / $TOTAL_TESTS" | bc -l)

# Display summary
echo ""
echo "Validation Results Summary:"
echo "=========================="
echo "Total Tests: $TOTAL_TESTS"
echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
echo -e "Failed: ${RED}$FAILED_TESTS${NC}"
echo "Success Rate: ${success_rate}%"

# Generate JSON report
cat > "$VALIDATION_REPORT" << EOF
{
  "cli_validation_report": {
    "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "test_configuration": {
      "terraform_version_constraint": "$TERRAFORM_VERSION_CONSTRAINT",
      "expected_providers": [$(printf '"%s",' "${EXPECTED_PROVIDERS[@]}" | sed 's/,$//')]
    },
    "summary": {
      "total_tests": $TOTAL_TESTS,
      "passed_tests": $PASSED_TESTS,
      "failed_tests": $FAILED_TESTS,
      "success_rate": $success_rate
    },
    "test_results": [
      $(IFS=','; echo "${VALIDATION_RESULTS[*]}")
    ],
    "recommendations": [
      $([ $FAILED_TESTS -gt 0 ] && echo "\"Address failed validation tests before proceeding\"," || echo "")
      $([ "$cache_found" = false ] && echo "\"Configure plugin caching for better performance\"," || echo "")
      $([ "$config_found" = false ] && echo "\"Create CLI configuration file for optimization\"," || echo "")
      "\"Validation baseline established for future reference\""
    ]
  }
}
EOF

# Cleanup
rm -f test_validation.tf .terraform.lock.hcl
rm -rf .terraform/

# Final recommendations
echo ""
echo -e "${YELLOW}💡 Validation Recommendations${NC}"
echo "============================="

if [ $FAILED_TESTS -gt 0 ]; then
    echo -e "${RED}⚠️${NC}  $FAILED_TESTS validation test(s) failed. Address these issues:"
    echo "   - Review failed tests above"
    echo "   - Check installation and configuration"
    echo "   - Verify network connectivity"
    echo "   - Consult troubleshooting documentation"
fi

if [ "$cache_found" = false ]; then
    echo -e "${YELLOW}💡${NC} Enable plugin caching for better performance:"
    echo "   mkdir -p ~/.terraform.d/plugin-cache"
    echo "   echo 'plugin_cache_dir = \"~/.terraform.d/plugin-cache\"' >> ~/.terraformrc"
fi

if [ "$config_found" = false ]; then
    echo -e "${YELLOW}💡${NC} Create CLI configuration for optimization:"
    echo "   touch ~/.terraformrc"
    echo "   # Add configuration options as needed"
fi

echo ""
if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "${GREEN}🎉 All validation tests passed! CLI is properly configured.${NC}"
    echo "✅ Ready to proceed to Lab 2.2: Configuring IBM Cloud Provider"
else
    echo -e "${YELLOW}⚠️  Some validation tests failed. Review and fix issues before proceeding.${NC}"
fi

echo ""
echo "📄 Detailed validation report saved to: $VALIDATION_REPORT"
echo ""
echo "🎯 Next Steps:"
echo "  1. Review validation results in $VALIDATION_REPORT"
echo "  2. Address any failed validation tests"
echo "  3. Implement recommended optimizations"
echo "  4. Re-run validation if needed"
echo "  5. Proceed to Lab 2.2: Configuring IBM Cloud Provider"
