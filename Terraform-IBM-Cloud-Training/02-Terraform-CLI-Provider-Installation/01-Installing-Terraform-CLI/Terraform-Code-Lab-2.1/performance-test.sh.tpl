#!/bin/bash
# Terraform CLI Performance Testing Script
# Generated by Terraform Lab 2.1 - CLI Installation Verification
# This script measures Terraform CLI performance across multiple operations

set -e

# Configuration from Terraform variables
ITERATIONS=${iterations}
TEST_TIMEOUT=${test_timeout}
PLUGIN_CACHE_DIR="${plugin_cache_dir}"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
RESULTS_FILE="performance_results_$TIMESTAMP.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Performance tracking arrays
declare -a INIT_TIMES
declare -a PLAN_TIMES
declare -a VALIDATE_TIMES

echo -e "${BLUE}🚀 Starting Terraform CLI Performance Testing${NC}"
echo "=============================================="
echo "Test Configuration:"
echo "  - Iterations: $ITERATIONS"
echo "  - Timeout: $TEST_TIMEOUT seconds"
echo "  - Plugin Cache: $PLUGIN_CACHE_DIR"
echo "  - Results File: $RESULTS_FILE"
echo ""

# Function to measure command execution time
measure_command() {
    local command="$1"
    local description="$2"
    local start_time=$(date +%s.%N)
    
    echo -n "  Testing $description... "
    
    if timeout $TEST_TIMEOUT bash -c "$command" >/dev/null 2>&1; then
        local end_time=$(date +%s.%N)
        local duration=$(echo "$end_time - $start_time" | bc -l)
        echo -e "${GREEN}✓${NC} ${duration}s"
        echo "$duration"
    else
        echo -e "${RED}✗ TIMEOUT${NC}"
        echo "timeout"
    fi
}

# Function to clean up between tests
cleanup_test_environment() {
    rm -rf .terraform/ .terraform.lock.hcl terraform.tfstate* 2>/dev/null || true
}

# Function to setup test environment
setup_test_environment() {
    # Create minimal test configuration
    cat > test_main.tf << EOF
terraform {
  required_providers {
    ibm = {
      source  = "IBM-Cloud/ibm"
      version = "~> 1.60.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.5.0"
    }
  }
}

provider "ibm" {
  region = "us-south"
}

resource "random_string" "test" {
  length = 8
}

data "ibm_resource_group" "test" {
  name = "default"
}
EOF
}

# Main performance testing loop
echo -e "${YELLOW}📊 Running Performance Tests${NC}"
echo "=============================="

for i in $(seq 1 $ITERATIONS); do
    echo -e "\n${BLUE}Iteration $i of $ITERATIONS${NC}"
    echo "------------------------"
    
    # Setup clean environment
    cleanup_test_environment
    setup_test_environment
    
    # Test terraform init performance
    init_time=$(measure_command "terraform init" "terraform init")
    if [ "$init_time" != "timeout" ]; then
        INIT_TIMES+=($init_time)
    fi
    
    # Test terraform validate performance
    validate_time=$(measure_command "terraform validate" "terraform validate")
    if [ "$validate_time" != "timeout" ]; then
        VALIDATE_TIMES+=($validate_time)
    fi
    
    # Test terraform plan performance
    plan_time=$(measure_command "terraform plan" "terraform plan")
    if [ "$plan_time" != "timeout" ]; then
        PLAN_TIMES+=($plan_time)
    fi
    
    # Brief pause between iterations
    sleep 1
done

# Calculate statistics
calculate_stats() {
    local array_name="$1[@]"
    local array=("${!array_name}")
    local count=${#array[@]}
    
    if [ $count -eq 0 ]; then
        echo "0,0,0,0"
        return
    fi
    
    # Calculate sum, min, max
    local sum=0
    local min=${array[0]}
    local max=${array[0]}
    
    for time in "${array[@]}"; do
        sum=$(echo "$sum + $time" | bc -l)
        if (( $(echo "$time < $min" | bc -l) )); then
            min=$time
        fi
        if (( $(echo "$time > $max" | bc -l) )); then
            max=$time
        fi
    done
    
    # Calculate average
    local avg=$(echo "scale=3; $sum / $count" | bc -l)
    
    echo "$avg,$min,$max,$count"
}

# Generate performance report
echo -e "\n${YELLOW}📈 Generating Performance Report${NC}"
echo "================================="

init_stats=$(calculate_stats INIT_TIMES)
validate_stats=$(calculate_stats VALIDATE_TIMES)
plan_stats=$(calculate_stats PLAN_TIMES)

IFS=',' read -r init_avg init_min init_max init_count <<< "$init_stats"
IFS=',' read -r validate_avg validate_min validate_max validate_count <<< "$validate_stats"
IFS=',' read -r plan_avg plan_min plan_max plan_count <<< "$plan_stats"

# Display results
echo ""
echo "Performance Results Summary:"
echo "============================"
printf "%-15s %-10s %-10s %-10s %-10s\n" "Operation" "Average" "Min" "Max" "Count"
printf "%-15s %-10s %-10s %-10s %-10s\n" "----------" "-------" "---" "---" "-----"
printf "%-15s %-10.3fs %-10.3fs %-10.3fs %-10s\n" "terraform init" "$init_avg" "$init_min" "$init_max" "$init_count"
printf "%-15s %-10.3fs %-10.3fs %-10.3fs %-10s\n" "terraform validate" "$validate_avg" "$validate_min" "$validate_max" "$validate_count"
printf "%-15s %-10.3fs %-10.3fs %-10.3fs %-10s\n" "terraform plan" "$plan_avg" "$plan_min" "$plan_max" "$plan_count"

# Generate JSON report
cat > "$RESULTS_FILE" << EOF
{
  "performance_test_results": {
    "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "test_configuration": {
      "iterations": $ITERATIONS,
      "timeout_seconds": $TEST_TIMEOUT,
      "plugin_cache_dir": "$PLUGIN_CACHE_DIR"
    },
    "terraform_init": {
      "average_seconds": $init_avg,
      "min_seconds": $init_min,
      "max_seconds": $init_max,
      "successful_runs": $init_count,
      "raw_times": [$(IFS=','; echo "${INIT_TIMES[*]}")]
    },
    "terraform_validate": {
      "average_seconds": $validate_avg,
      "min_seconds": $validate_min,
      "max_seconds": $validate_max,
      "successful_runs": $validate_count,
      "raw_times": [$(IFS=','; echo "${VALIDATE_TIMES[*]}")]
    },
    "terraform_plan": {
      "average_seconds": $plan_avg,
      "min_seconds": $plan_min,
      "max_seconds": $plan_max,
      "successful_runs": $plan_count,
      "raw_times": [$(IFS=','; echo "${PLAN_TIMES[*]}")]
    },
    "performance_analysis": {
      "plugin_cache_effective": $([ -d "$PLUGIN_CACHE_DIR" ] && echo "true" || echo "false"),
      "total_test_duration": "$(echo "$init_avg + $validate_avg + $plan_avg" | bc -l)",
      "recommendations": [
        $([ $(echo "$init_avg > 30" | bc -l) -eq 1 ] && echo "\"Consider enabling plugin caching for faster init times\"," || echo "")
        $([ $(echo "$plan_avg > 10" | bc -l) -eq 1 ] && echo "\"Plan times may be slow - check network connectivity\"," || echo "")
        "\"Performance baseline established for future comparisons\""
      ]
    }
  }
}
EOF

# Performance recommendations
echo ""
echo -e "${YELLOW}💡 Performance Recommendations${NC}"
echo "==============================="

if (( $(echo "$init_avg > 30" | bc -l) )); then
    echo -e "${RED}⚠️${NC}  Init times are slow (>30s). Consider:"
    echo "   - Enabling plugin caching"
    echo "   - Using a local mirror"
    echo "   - Checking network connectivity"
fi

if (( $(echo "$plan_avg > 10" | bc -l) )); then
    echo -e "${RED}⚠️${NC}  Plan times are slow (>10s). Consider:"
    echo "   - Optimizing provider configuration"
    echo "   - Reducing resource complexity"
    echo "   - Checking IBM Cloud API connectivity"
fi

if [ ! -d "$PLUGIN_CACHE_DIR" ]; then
    echo -e "${YELLOW}💡${NC} Plugin caching not detected. Enable with:"
    echo "   mkdir -p $PLUGIN_CACHE_DIR"
    echo "   echo 'plugin_cache_dir = \"$PLUGIN_CACHE_DIR\"' >> ~/.terraformrc"
fi

echo ""
echo -e "${GREEN}✅ Performance testing completed successfully!${NC}"
echo "📄 Detailed results saved to: $RESULTS_FILE"

# Cleanup
cleanup_test_environment
rm -f test_main.tf

echo ""
echo "🎯 Next Steps:"
echo "  1. Review performance results in $RESULTS_FILE"
echo "  2. Implement recommended optimizations"
echo "  3. Re-run tests to measure improvements"
echo "  4. Proceed to Lab 2.2: Configuring IBM Cloud Provider"
